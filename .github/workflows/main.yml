name: Build Multi-Platform (self-hosted)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted
    environment: main
    defaults:
      run:
        shell: powershell -ExecutionPolicy Bypass -Command "& '{0}'"

    strategy:
      matrix:
        platform: [Windows, Linux]

    env:
      UNITY_VERSION: "6000.2.2f1"
      PROJECT_PATH:  ${{ github.workspace }}
      BUILDS_ROOT:   "C:\\Builds"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Optional but recommended: speed up subsequent builds
      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ env.UNITY_VERSION }}-${{ hashFiles('Packages/manifest.json') }}
          restore-keys: |
            Library-${{ env.UNITY_VERSION }}-
            Library-

      # Make a unique output dir for this run and expose it to later steps
      - name: Compute output dir
        id: paths
        run: |
          $outDir = Join-Path $env:BUILDS_ROOT "CastleOfTime-${{ github.run_number }}-${{ matrix.platform }}"
          "OUT_DIR=$outDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "OUT_DIR = $outDir"

      # (Optional) Ensure the output root exists
      - name: Ensure builds root exists
        run: New-Item -ItemType Directory -Force -Path $env:BUILDS_ROOT | Out-Null

      # (Optional) Preflight: make sure no GUI editor is locking the project
      - name: Kill stray Unity processes / clear lock
        run: |
          Get-Process -Name "Unity" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          Get-Process -Name "UnityPackageManager" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          $lock = Join-Path $env:PROJECT_PATH "Temp\UnityLockfile"
          if (Test-Path $lock) { Remove-Item $lock -Force -ErrorAction SilentlyContinue }

      # Run your PowerShell build
      - name: Build (${{ matrix.platform }})
        run: .\ci\build.ps1 -UnityVersion $env:UNITY_VERSION -ProjectPath $env:PROJECT_PATH -OutDir $env:OUT_DIR -BuildTarget "${{ matrix.platform }}"

      # Clean up log files from build output
      - name: Clean up logs
        run: |
          Get-ChildItem -Path $env:OUT_DIR -Filter "*.log" -Recurse | Remove-Item -Force
          Write-Host "Removed all .log files from build output"

      # Zip the build folder
      - name: Zip build
        run: |
          $zipPath = Join-Path $env:BUILDS_ROOT "CastleOfTime-${{ github.run_number }}-${{ matrix.platform }}.zip"
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path "$env:OUT_DIR\*" -DestinationPath $zipPath
          "ZIP_PATH=$zipPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "ZIP_PATH = $zipPath"

      # Upload the zipped build
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: CastleOfTime-${{ github.run_number }}-${{ matrix.platform }}
          path: ${{ env.ZIP_PATH }}
          retention-days: 14
          compression-level: 0

      # Upload to itch.io using Butler action
      - name: Upload to itch.io (${{ matrix.platform }})
        uses: Ayowel/butler-to-itch@v1.2.0
        with:
          butler_key: ${{ secrets.BUTLER_API_KEY }}
          itch_user: playlastminutegames
          itch_game: castle-of-time
          version: ${{ github.run_number }}
          files: |
            ${{ matrix.platform }} ${{ env.OUT_DIR }}/*

      - name: Collect logs
        if: always()
        run: |
          $logs = Join-Path $env:RUNNER_TEMP "unity-logs-${{ matrix.platform }}"
          New-Item -ItemType Directory -Force -Path $logs | Out-Null

          # Editor & UPM logs (Windows)
          $editor = Join-Path $env:LOCALAPPDATA "Unity\Editor\Editor.log"
          if (Test-Path $editor) { Copy-Item $editor $logs -Force }

          $upm = Join-Path $env:LOCALAPPDATA "Unity\cache\upm\logs"
          if (Test-Path $upm) { Copy-Item $upm $logs -Recurse -Force }

          # Build output logs only (no build files)
          $buildLogs = Join-Path $env:OUT_DIR "*.log"
          if (Test-Path $buildLogs) { 
            Get-ChildItem -Path $env:OUT_DIR -Filter "*.log" | Copy-Item -Destination $logs -Force
          }

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Logs-${{ github.run_number }}-${{ matrix.platform }}
          path: ${{ runner.temp }}/unity-logs-${{ matrix.platform }}
          retention-days: 14
          compression-level: 6

  notify:
    runs-on: self-hosted
    needs: build
    if: always()
    environment: main
    defaults:
      run:
        shell: powershell -ExecutionPolicy Bypass -Command "& '{0}'"

    steps:
      - name: Send webhook notification
        run: |
          $status = "${{ needs.build.result }}"
          $runUrl = "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          $artifactUrl = "$runUrl#artifacts"
          
          $webhook = "${{ secrets.DISCORD_WEBHOOK_URL }}"
          if ([string]::IsNullOrWhiteSpace($webhook)) {
            Write-Host "No webhook URL configured, skipping notification"
            exit 0
          }
          
          $color = if ($status -eq "success") { 3066993 } else { 15158332 }
          $emoji = if ($status -eq "success") { "üéÆ" } else { "‚ùå" }
          
          $commitShort = "${{ github.sha }}".Substring(0, 7)
          $commitUrl = "${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          
          $itchUrl = "https://playlastminutegames.itch.io/castle-of-time"
          
          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
          
          # Build JSON using PSCustomObject and ConvertTo-Json
          $payload = [PSCustomObject]@{
            embeds = @(
              [PSCustomObject]@{
                title = "$emoji CastleOfTime Build #${{ github.run_number }}"
                description = "Multi-platform build $status and uploaded to itch.io"
                url = $itchUrl
                color = $color
                fields = @(
                  [PSCustomObject]@{
                    name = "Status"
                    value = $status
                    inline = $true
                  }
                  [PSCustomObject]@{
                    name = "Platforms"
                    value = "Windows + Linux"
                    inline = $true
                  }
                  [PSCustomObject]@{
                    name = "Commit"
                    value = "[$commitShort]($commitUrl)"
                    inline = $true
                  }
                  [PSCustomObject]@{
                    name = "Play on itch.io"
                    value = "[$itchUrl]($itchUrl)"
                    inline = $false
                  }
                  [PSCustomObject]@{
                    name = "Download Artifacts"
                    value = "[View Artifacts]($artifactUrl)"
                    inline = $false
                  }
                )
                timestamp = $timestamp
                footer = [PSCustomObject]@{
                  text = "Castle of Time ‚Ä¢ Last Minute Games"
                }
              }
            )
          }
          
          $json = $payload | ConvertTo-Json -Depth 10 -Compress
          
          try {
            Invoke-RestMethod -Uri $webhook -Method Post -Body ([System.Text.Encoding]::UTF8.GetBytes($json)) -ContentType "application/json; charset=utf-8"
            Write-Host "Webhook sent successfully"
          } catch {
            Write-Host "Failed to send webhook: $_"
            exit 1
          }
