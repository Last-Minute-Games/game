name: Build Windows (self-hosted)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    runs-on: self-hosted          # your Windows 11 runner
    defaults:
      run:
        shell: pwsh

    env:
      UNITY_VERSION: "6000.2.2f1"
      PROJECT_PATH:  ${{ github.workspace }}
      BUILDS_ROOT:   "C:\\Builds"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Optional but recommended: speed up subsequent builds
      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ env.UNITY_VERSION }}-${{ hashFiles('Packages/manifest.json') }}
          restore-keys: |
            Library-${{ env.UNITY_VERSION }}-
            Library-

      # Make a unique output dir for this run and expose it to later steps
      - name: Compute output dir
        id: paths
        run: |
          $ts = Get-Date -Format "yyyyMMdd_HHmmss"
          $outDir = Join-Path $env:BUILDS_ROOT "Build_${ts}_run${{ github.run_number }}"
          "OUT_DIR=$outDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "OUT_DIR = $outDir"

      # (Optional) Ensure the output root exists
      - name: Ensure builds root exists
        run: New-Item -ItemType Directory -Force -Path $env:BUILDS_ROOT | Out-Null

      # (Optional) Preflight: make sure no GUI editor is locking the project
      - name: Kill stray Unity processes / clear lock
        run: |
          taskkill /IM "Unity.exe" /F /T 2>$null; $LASTEXITCODE=0
          taskkill /IM "UnityPackageManager.exe" /F /T 2>$null; $LASTEXITCODE=0
          $lock = Join-Path $env:PROJECT_PATH "Temp\UnityLockfile"
          if (Test-Path $lock) { Remove-Item $lock -Force -ErrorAction SilentlyContinue }

      # Run your PowerShell build (no credentials; license must already be active for the runner account)
      - name: Build (StandaloneWindows64)
        run: .\ci\build.ps1 -UnityVersion $env:UNITY_VERSION -ProjectPath $env:PROJECT_PATH -OutDir $env:OUT_DIR

      # Zip the build folder
      - name: Zip build
        run: |
          $zipPath = "$env:OUT_DIR.zip"
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path "$env:OUT_DIR\*" -DestinationPath $zipPath
          "ZIP_PATH=$zipPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "ZIP_PATH = $zipPath"

      # Upload as an artifact (kept by GitHub; downloadable from the run)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: WindowsBuild-${{ github.run_number }}
          path: ${{ env.ZIP_PATH }}
          retention-days: 14
